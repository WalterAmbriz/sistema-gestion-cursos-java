ðŸ“¦ model/ â†’ Clases de datos (POJOs)
âœ… Estudiante.java
Responsabilidad: representar los datos de un estudiante.
Atributos:
â€¢	int id (autogenerado)
â€¢	String nombre
â€¢	double nota
â€¢	int asistencia
MÃ©todos:
â€¢	Getters/setters
â€¢	Constructor
â€¢	boolean esAprobado() â†’ nota â‰¥ 6 && asistencia â‰¥ 75
________________________________________
âœ… Curso.java
Responsabilidad: representar los datos de un curso.
Atributos:
â€¢	int id (autogenerado)
â€¢	String nombre
â€¢	int cupoMaximo
â€¢	List<Integer> idsEstudiantes (opcional: solo IDs para simplificar)
MÃ©todos:
â€¢	Getters/setters
â€¢	Constructor
â€¢	boolean hayCupoDisponible(int inscritos)
________________________________________
âœ… Inscripcion.java (opcional)
Responsabilidad: representar la relaciÃ³n Estudiante-Curso.
Atributos:
â€¢	int idEstudiante
â€¢	int idCurso
â€¢	LocalDate fecha
MÃ©todos:
â€¢	Getters/setters
ðŸ§  Solo es necesaria si querÃ©s una capa extra entre estudiantes y cursos. Si no, podÃ©s manejarlo directamente en los gestores.
________________________________________
ðŸ“¦ service/ â†’ LÃ³gica de negocio
âœ… GestorEstudiantes.java
Responsabilidad: manejar operaciones sobre estudiantes.
MÃ©todos:
â€¢	agregar(Estudiante)
â€¢	eliminarPorId(int)
â€¢	buscarPorNombre(String)
â€¢	listarTodos()
â€¢	listarAprobados()
â€¢	actualizarNota(int id, double nota)
â€¢	actualizarAsistencia(int id, int asistencia)
________________________________________
âœ… GestorCursos.java
Responsabilidad: manejar operaciones sobre cursos.
MÃ©todos:
â€¢	agregar(Curso)
â€¢	eliminarPorId(int)
â€¢	buscarPorNombre(String)
â€¢	listarTodos()
â€¢	verCupoDisponible(int idCurso)
â€¢	verEstudiantesInscritos(int idCurso)
________________________________________
âœ… GestorInscripciones.java
Responsabilidad: vincular estudiantes y cursos.
MÃ©todos:
â€¢	inscribir(int idEstudiante, int idCurso)
â€¢	cancelarInscripcion(int idEstudiante, int idCurso)
â€¢	verCursosDeEstudiante(int idEstudiante)
â€¢	verEstudiantesDeCurso(int idCurso)
________________________________________
ðŸ“¦ persistence/ â†’ Guardar y leer archivos JSON
âœ… EstudianteJsonRepository.java
MÃ©todos:
â€¢	guardarLista(List<Estudiante>)
â€¢	List<Estudiante> cargarLista()
Utiliza Jackson o Gson.
________________________________________
âœ… CursoJsonRepository.java
Igual que EstudianteJsonRepository, pero para cursos.
________________________________________
ðŸ“¦ menu/ â†’ Interfaz por consola
âœ… MenuPrincipal.java
Responsabilidad: interacciÃ³n con el usuario.
MÃ©todos:
â€¢	main(String[] args)
â€¢	Muestra el menÃº
â€¢	Lee entradas
â€¢	Llama a mÃ©todos del servicio
________________________________________
ðŸ“¦ utils/ â†’ Funciones reutilizables
âœ… ValidadorDatos.java
MÃ©todos estÃ¡ticos:
â€¢	boolean esNombreValido(String)
â€¢	boolean esNotaValida(double)
â€¢	boolean esAsistenciaValida(int)
â€¢	boolean esNumero(String)

